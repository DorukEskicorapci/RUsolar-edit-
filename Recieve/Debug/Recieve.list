
Recieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039e0  080039e0  000049e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f0  080039f0  00005040  2**0
                  CONTENTS
  4 .ARM          00000008  080039f0  080039f0  000049f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f8  080039f8  00005040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000049f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039fc  080039fc  000049fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08003a00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000040  08003a40  00005040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003a40  000051ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9a7  00000000  00000000  0000506e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0f  00000000  00000000  00011a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00013828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000917  00000000  00000000  000143f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b4d  00000000  00000000  00014d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfbb  00000000  00000000  0003b85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4f2f  00000000  00000000  00048817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  0013d78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014091c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000040 	.word	0x20000040
 8000214:	00000000 	.word	0x00000000
 8000218:	080039c8 	.word	0x080039c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000044 	.word	0x20000044
 8000234:	080039c8 	.word	0x080039c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <find_param_by_id>:
 * Find a parameter by its ID
 * @param id: 16-bit parameter ID
 * @return can_param_t*: pointer to the parameter
 */
static can_param_t *find_param_by_id(uint16_t id)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	assert_param(id >= PARAM_ID_RANGE_MIN && id <= PARAM_ID_RANGE_MAX);

	for (int i = 0; i < gv_params_size; i++)
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e017      	b.n	8000568 <find_param_by_id+0x40>
	{
		if (id == gv_params_arr[i].PARAM_ID)
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <find_param_by_id+0x58>)
 800053a:	6819      	ldr	r1, [r3, #0]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	440b      	add	r3, r1
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	88fa      	ldrh	r2, [r7, #6]
 800054c:	429a      	cmp	r2, r3
 800054e:	d108      	bne.n	8000562 <find_param_by_id+0x3a>
		{
			return &gv_params_arr[i];
 8000550:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <find_param_by_id+0x58>)
 8000552:	6819      	ldr	r1, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	440b      	add	r3, r1
 8000560:	e008      	b.n	8000574 <find_param_by_id+0x4c>
	for (int i = 0; i < gv_params_size; i++)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <find_param_by_id+0x5c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d3e2      	bcc.n	8000538 <find_param_by_id+0x10>
		}
	}

	return NULL;
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	2000007c 	.word	0x2000007c
 8000584:	20000000 	.word	0x20000000

08000588 <send_can_message>:
 * Send a CAN message
 * @param data: 8-bit array of the payload as maximum size of 8 bytes
 * @return HAL_StatusTypeDef: HAL status
 */
static HAL_StatusTypeDef send_can_message(uint8_t data[8])
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	// Make sure we don't send a NULL pointer
	if (data == NULL) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <send_can_message+0x12>
		return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e007      	b.n	80005aa <send_can_message+0x22>
	}

	return HAL_CAN_AddTxMessage(can_hcan, &can_tx_header, data, &tx_mailbox);
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <send_can_message+0x2c>)
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <send_can_message+0x30>)
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4906      	ldr	r1, [pc, #24]	@ (80005bc <send_can_message+0x34>)
 80005a4:	f001 f922 	bl	80017ec <HAL_CAN_AddTxMessage>
 80005a8:	4603      	mov	r3, r0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000005c 	.word	0x2000005c
 80005b8:	20000060 	.word	0x20000060
 80005bc:	20000064 	.word	0x20000064

080005c0 <heartbeat_loop>:

/**
 * TODO: Not sure what this function does, will need to check later
 */
void heartbeat_loop()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	if (hb_message_count >= 2)
 80005c4:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <heartbeat_loop+0x7c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d907      	bls.n	80005dc <heartbeat_loop+0x1c>
	{
		hb_timestamp = HAL_GetTick();
 80005cc:	f000 fed6 	bl	800137c <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <heartbeat_loop+0x80>)
 80005d4:	6013      	str	r3, [r2, #0]
		can_hb_pulse = 1;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <heartbeat_loop+0x84>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GetTick() - hb_timestamp > 250 + config->can_id)
 80005dc:	f000 fece 	bl	800137c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <heartbeat_loop+0x80>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <heartbeat_loop+0x88>)
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	7a12      	ldrb	r2, [r2, #8]
 80005ee:	32fa      	adds	r2, #250	@ 0xfa
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d905      	bls.n	8000600 <heartbeat_loop+0x40>
	{
		hb_message_count = 0;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <heartbeat_loop+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
		can_hb_pulse = 0;
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <heartbeat_loop+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GetTick() - hb_timestamp > 1000 + config->can_id)
 8000600:	f000 febc 	bl	800137c <HAL_GetTick>
 8000604:	4602      	mov	r2, r0
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <heartbeat_loop+0x80>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <heartbeat_loop+0x88>)
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	7a12      	ldrb	r2, [r2, #8]
 8000612:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8000616:	4293      	cmp	r3, r2
 8000618:	d90d      	bls.n	8000636 <heartbeat_loop+0x76>
	{
		hb_pending = 1;
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <heartbeat_loop+0x8c>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
		hb_message_count++;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <heartbeat_loop+0x7c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <heartbeat_loop+0x7c>)
 800062a:	701a      	strb	r2, [r3, #0]
		hb_timestamp = HAL_GetTick();
 800062c:	f000 fea6 	bl	800137c <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
 8000632:	4a03      	ldr	r2, [pc, #12]	@ (8000640 <heartbeat_loop+0x80>)
 8000634:	6013      	str	r3, [r2, #0]
	}
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000094 	.word	0x20000094
 8000640:	20000098 	.word	0x20000098
 8000644:	2000009c 	.word	0x2000009c
 8000648:	20000080 	.word	0x20000080
 800064c:	2000009d 	.word	0x2000009d

08000650 <sw3_can_set_gv_commands_callback>:

/**
 * TODO: Not sure what this function does, will need to check later
 */
void sw3_can_set_gv_commands_callback(void (*callback)(uint16_t param_id, uint32_t payload))
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (callback == NULL)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <sw3_can_set_gv_commands_callback+0x16>
		return;
	sw3_can_gv_commands_callback = callback;
 800065e:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <sw3_can_set_gv_commands_callback+0x24>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	e000      	b.n	8000668 <sw3_can_set_gv_commands_callback+0x18>
		return;
 8000666:	bf00      	nop
}
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000088 	.word	0x20000088

08000678 <sw3_can_set_gv_params_callback>:
	if (callback == NULL)
		return;
	sw3_can_shared_params_callback = callback;
}

void sw3_can_set_gv_params_callback(void (*callback)(uint16_t param_id, uint32_t payload)) {
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (callback == NULL) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <sw3_can_set_gv_params_callback+0x16>
		return;
	}
	sw3_can_gv_params_callback = callback;
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <sw3_can_set_gv_params_callback+0x24>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e000      	b.n	8000690 <sw3_can_set_gv_params_callback+0x18>
		return;
 800068e:	bf00      	nop
}
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000090 	.word	0x20000090

080006a0 <sw3_can_interrupt_handler>:
 * This function is called when a message is received from CAN bus
 * @param hcan: pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN
 * @return void
 */
void sw3_can_interrupt_handler(CAN_HandleTypeDef *hcan)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af06      	add	r7, sp, #24
 80006a6:	6078      	str	r0, [r7, #4]
	assert_param(hcan != NULL);

	static CAN_RxHeaderTypeDef RxHeader;
	static can_payload_t can_payload;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, can_payload.data) != HAL_OK)
 80006a8:	4b7c      	ldr	r3, [pc, #496]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80006aa:	4a7d      	ldr	r2, [pc, #500]	@ (80008a0 <sw3_can_interrupt_handler+0x200>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f001 f96c 	bl	800198c <HAL_CAN_GetRxMessage>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f040 80dd 	bne.w	8000876 <sw3_can_interrupt_handler+0x1d6>
	{
		return;
	}

	if (RxHeader.StdId < SHARED_IDENTIFICATION_RANGE_MIN || RxHeader.StdId > SHARED_IDENTIFICATION_RANGE_MAX)
 80006bc:	4b78      	ldr	r3, [pc, #480]	@ (80008a0 <sw3_can_interrupt_handler+0x200>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80006c2:	d912      	bls.n	80006ea <sw3_can_interrupt_handler+0x4a>
	{
		// device is not SW3, call third party callback
		if (sw3_can_third_party_callback == NULL)
 80006c4:	4b77      	ldr	r3, [pc, #476]	@ (80008a4 <sw3_can_interrupt_handler+0x204>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f000 80d6 	beq.w	800087a <sw3_can_interrupt_handler+0x1da>
		{
			return;
		}

		return sw3_can_third_party_callback(RxHeader, can_payload.data);
 80006ce:	4b75      	ldr	r3, [pc, #468]	@ (80008a4 <sw3_can_interrupt_handler+0x204>)
 80006d0:	681d      	ldr	r5, [r3, #0]
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <sw3_can_interrupt_handler+0x200>)
 80006d4:	4a71      	ldr	r2, [pc, #452]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80006d6:	9203      	str	r2, [sp, #12]
 80006d8:	466c      	mov	r4, sp
 80006da:	f103 0210 	add.w	r2, r3, #16
 80006de:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e6:	47a8      	blx	r5
 80006e8:	e0d4      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	}

	// Find the parameter by given ID
	can_param_t *param = find_param_by_id(can_payload.id);
 80006ea:	4b6c      	ldr	r3, [pc, #432]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff1a 	bl	8000528 <find_param_by_id>
 80006f4:	60f8      	str	r0, [r7, #12]

	if (param == NULL)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f000 80c0 	beq.w	800087e <sw3_can_interrupt_handler+0x1de>
	{ // Parameter is unknown to this firmware
		return;
	}

	if (param->flags.message_mode == AUTO_BROADCAST ||
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	7d5b      	ldrb	r3, [r3, #21]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b03      	cmp	r3, #3
 800070a:	d006      	beq.n	800071a <sw3_can_interrupt_handler+0x7a>
		param->flags.message_mode == MANUAL_BROADCAST)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	7d5b      	ldrb	r3, [r3, #21]
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
	if (param->flags.message_mode == AUTO_BROADCAST ||
 8000716:	2b04      	cmp	r3, #4
 8000718:	d105      	bne.n	8000726 <sw3_can_interrupt_handler+0x86>
	{
		// Another board is conflicting with this board
		sw3_can_errors.broadcast_conflict = 1;
 800071a:	4a63      	ldr	r2, [pc, #396]	@ (80008a8 <sw3_can_interrupt_handler+0x208>)
 800071c:	7813      	ldrb	r3, [r2, #0]
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	7013      	strb	r3, [r2, #0]

		return;
 8000724:	e0b6      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	}

	if (
		can_payload.id >= SHARED_IDENTIFICATION_RANGE_MIN &&
		can_payload.id <= SHARED_IDENTIFICATION_RANGE_MAX)
 8000726:	4b5d      	ldr	r3, [pc, #372]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000728:	881b      	ldrh	r3, [r3, #0]
	if (
 800072a:	2b7f      	cmp	r3, #127	@ 0x7f
 800072c:	d816      	bhi.n	800075c <sw3_can_interrupt_handler+0xbc>
	{
		// Identication handler
		if (sw3_can_shared_params_callback == NULL)
 800072e:	4b5f      	ldr	r3, [pc, #380]	@ (80008ac <sw3_can_interrupt_handler+0x20c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	f000 80a5 	beq.w	8000882 <sw3_can_interrupt_handler+0x1e2>
			return;

		sw3_can_shared_params_callback(RxHeader, can_payload.id, can_payload.value);
 8000738:	4b5c      	ldr	r3, [pc, #368]	@ (80008ac <sw3_can_interrupt_handler+0x20c>)
 800073a:	681d      	ldr	r5, [r3, #0]
 800073c:	4b57      	ldr	r3, [pc, #348]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	4b56      	ldr	r3, [pc, #344]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000742:	6859      	ldr	r1, [r3, #4]
 8000744:	4b56      	ldr	r3, [pc, #344]	@ (80008a0 <sw3_can_interrupt_handler+0x200>)
 8000746:	9104      	str	r1, [sp, #16]
 8000748:	9203      	str	r2, [sp, #12]
 800074a:	466c      	mov	r4, sp
 800074c:	f103 0210 	add.w	r2, r3, #16
 8000750:	ca07      	ldmia	r2, {r0, r1, r2}
 8000752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000758:	47a8      	blx	r5
 800075a:	e09b      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	}
	else if (
		can_payload.id >= SHARED_FAULT_RANGE_MIN &&
 800075c:	4b4f      	ldr	r3, [pc, #316]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800075e:	881b      	ldrh	r3, [r3, #0]
	else if (
 8000760:	2b7f      	cmp	r3, #127	@ 0x7f
 8000762:	d91a      	bls.n	800079a <sw3_can_interrupt_handler+0xfa>
		can_payload.id <= SHARED_FAULT_RANGE_MAX)
 8000764:	4b4d      	ldr	r3, [pc, #308]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000766:	881b      	ldrh	r3, [r3, #0]
		can_payload.id >= SHARED_FAULT_RANGE_MIN &&
 8000768:	2bff      	cmp	r3, #255	@ 0xff
 800076a:	d816      	bhi.n	800079a <sw3_can_interrupt_handler+0xfa>
	{
		// Fault handler
		if (sw3_can_shared_params_callback == NULL)
 800076c:	4b4f      	ldr	r3, [pc, #316]	@ (80008ac <sw3_can_interrupt_handler+0x20c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8088 	beq.w	8000886 <sw3_can_interrupt_handler+0x1e6>
			return;

		sw3_can_shared_params_callback(RxHeader, can_payload.id, can_payload.value);
 8000776:	4b4d      	ldr	r3, [pc, #308]	@ (80008ac <sw3_can_interrupt_handler+0x20c>)
 8000778:	681d      	ldr	r5, [r3, #0]
 800077a:	4b48      	ldr	r3, [pc, #288]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	4b47      	ldr	r3, [pc, #284]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	4b47      	ldr	r3, [pc, #284]	@ (80008a0 <sw3_can_interrupt_handler+0x200>)
 8000784:	9104      	str	r1, [sp, #16]
 8000786:	9203      	str	r2, [sp, #12]
 8000788:	466c      	mov	r4, sp
 800078a:	f103 0210 	add.w	r2, r3, #16
 800078e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000796:	47a8      	blx	r5
 8000798:	e07c      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	}
	else if (
		can_payload.id >= SHARED_STR_BROADCAST_RANGE_MIN &&
 800079a:	4b40      	ldr	r3, [pc, #256]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800079c:	881b      	ldrh	r3, [r3, #0]
	else if (
 800079e:	2bff      	cmp	r3, #255	@ 0xff
 80007a0:	d91a      	bls.n	80007d8 <sw3_can_interrupt_handler+0x138>
		can_payload.id <= SHARED_STR_BROADCAST_RANGE_MAX)
 80007a2:	4b3e      	ldr	r3, [pc, #248]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
		can_payload.id >= SHARED_STR_BROADCAST_RANGE_MIN &&
 80007a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007aa:	d215      	bcs.n	80007d8 <sw3_can_interrupt_handler+0x138>
	{
		// String broadcast handler
		if (sw3_can_shared_params_callback == NULL)
 80007ac:	4b3f      	ldr	r3, [pc, #252]	@ (80008ac <sw3_can_interrupt_handler+0x20c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d06a      	beq.n	800088a <sw3_can_interrupt_handler+0x1ea>
			return;

		sw3_can_shared_params_callback(RxHeader, can_payload.id, can_payload.value);
 80007b4:	4b3d      	ldr	r3, [pc, #244]	@ (80008ac <sw3_can_interrupt_handler+0x20c>)
 80007b6:	681d      	ldr	r5, [r3, #0]
 80007b8:	4b38      	ldr	r3, [pc, #224]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007ba:	881a      	ldrh	r2, [r3, #0]
 80007bc:	4b37      	ldr	r3, [pc, #220]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007be:	6859      	ldr	r1, [r3, #4]
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <sw3_can_interrupt_handler+0x200>)
 80007c2:	9104      	str	r1, [sp, #16]
 80007c4:	9203      	str	r2, [sp, #12]
 80007c6:	466c      	mov	r4, sp
 80007c8:	f103 0210 	add.w	r2, r3, #16
 80007cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d4:	47a8      	blx	r5
 80007d6:	e05d      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	}
	else if (
		can_payload.id >= RESERVED_RANGE_MIN &&
 80007d8:	4b30      	ldr	r3, [pc, #192]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007da:	881b      	ldrh	r3, [r3, #0]
	else if (
 80007dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007e0:	d304      	bcc.n	80007ec <sw3_can_interrupt_handler+0x14c>
		can_payload.id <= RESERVED_RANGE_MIN)
 80007e2:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
		can_payload.id >= RESERVED_RANGE_MIN &&
 80007e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007ea:	d953      	bls.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	{
		// Reserver handler
		// For now, do nothing here
	}
	else if (
		can_payload.id >= GLOBAL_VEHICLE_CMD_RANGE_MIN &&
 80007ec:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
	else if (
 80007f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007f4:	d31f      	bcc.n	8000836 <sw3_can_interrupt_handler+0x196>
		can_payload.id <= GLOBAL_VEHICLE_CMD_RANGE_MAX)
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
		can_payload.id >= GLOBAL_VEHICLE_CMD_RANGE_MIN &&
 80007fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007fe:	d21a      	bcs.n	8000836 <sw3_can_interrupt_handler+0x196>
	{
		// Global vehicle commands handler
		// Detect heartbeat
		if (can_payload.id == HEARTBEAT_PARAM_ID)
 8000800:	4b26      	ldr	r3, [pc, #152]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000808:	d108      	bne.n	800081c <sw3_can_interrupt_handler+0x17c>
		{
			hb_message_count++;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <sw3_can_interrupt_handler+0x210>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <sw3_can_interrupt_handler+0x210>)
 8000814:	701a      	strb	r2, [r3, #0]
			heartbeat_loop();
 8000816:	f7ff fed3 	bl	80005c0 <heartbeat_loop>
		if (can_payload.id == HEARTBEAT_PARAM_ID)
 800081a:	e03b      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
		}
		else
		{
			// Something else
			if (sw3_can_gv_commands_callback == NULL)
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <sw3_can_interrupt_handler+0x214>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d034      	beq.n	800088e <sw3_can_interrupt_handler+0x1ee>
				return;

			sw3_can_gv_commands_callback(can_payload.id, can_payload.value);
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <sw3_can_interrupt_handler+0x214>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800082a:	8812      	ldrh	r2, [r2, #0]
 800082c:	491b      	ldr	r1, [pc, #108]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800082e:	6849      	ldr	r1, [r1, #4]
 8000830:	4610      	mov	r0, r2
 8000832:	4798      	blx	r3
		if (can_payload.id == HEARTBEAT_PARAM_ID)
 8000834:	e02e      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
		}
	}
	else if (
		can_payload.id >= GLOBAL_VEHICLE_PARAMS_RANGE_MIN &&
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000838:	881b      	ldrh	r3, [r3, #0]
	else if (
 800083a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800083e:	d328      	bcc.n	8000892 <sw3_can_interrupt_handler+0x1f2>
		can_payload.id <= GLOBAL_VEHICLE_PARAMS_RANGE_MAX)
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000842:	881b      	ldrh	r3, [r3, #0]
		can_payload.id >= GLOBAL_VEHICLE_PARAMS_RANGE_MIN &&
 8000844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000848:	d223      	bcs.n	8000892 <sw3_can_interrupt_handler+0x1f2>
	{
		// Global vehicle params handler
		param->last_value = param->value;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	609a      	str	r2, [r3, #8]

		param->value = can_payload.value;
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	605a      	str	r2, [r3, #4]

		param->timestamp = HAL_GetTick();
 800085a:	f000 fd8f 	bl	800137c <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	611a      	str	r2, [r3, #16]

		sw3_can_gv_params_callback(can_payload.id, can_payload.value);
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <sw3_can_interrupt_handler+0x218>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	490b      	ldr	r1, [pc, #44]	@ (800089c <sw3_can_interrupt_handler+0x1fc>)
 800086e:	6849      	ldr	r1, [r1, #4]
 8000870:	4610      	mov	r0, r2
 8000872:	4798      	blx	r3
 8000874:	e00e      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
		return;
 8000876:	bf00      	nop
 8000878:	e00c      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
			return;
 800087a:	bf00      	nop
 800087c:	e00a      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
		return;
 800087e:	bf00      	nop
 8000880:	e008      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
			return;
 8000882:	bf00      	nop
 8000884:	e006      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
			return;
 8000886:	bf00      	nop
 8000888:	e004      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
			return;
 800088a:	bf00      	nop
 800088c:	e002      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
				return;
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <sw3_can_interrupt_handler+0x1f4>
	}
	else
	{
		// Invalid ID
		return;
 8000892:	bf00      	nop
	}


}
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bdb0      	pop	{r4, r5, r7, pc}
 800089a:	bf00      	nop
 800089c:	200000c0 	.word	0x200000c0
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	20000084 	.word	0x20000084
 80008a8:	200000a0 	.word	0x200000a0
 80008ac:	2000008c 	.word	0x2000008c
 80008b0:	20000094 	.word	0x20000094
 80008b4:	20000088 	.word	0x20000088
 80008b8:	20000090 	.word	0x20000090

080008bc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * This function is called when a message is received from CAN bus
 * @param hcan: pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN
 * @return void
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	assert_param(hcan != NULL);

    HAL_GPIO_TogglePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin);
 80008c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80008ca:	f001 ff26 	bl	800271a <HAL_GPIO_TogglePin>
	sw3_can_interrupt_handler(hcan);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fee6 	bl	80006a0 <sw3_can_interrupt_handler>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021400 	.word	0x40021400

080008e0 <sw3_can_init>:
 * @param hcan: pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN
 * @param config: pointer to a can_config_t structure that contains the configuration information for the specified CAN
 * @return void
 */
void sw3_can_init(CAN_HandleTypeDef *hcan, can_config_t *func_config)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	@ 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	assert_param(hcan != NULL && func_config != NULL);

	can_hcan = hcan;
 80008ea:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <sw3_can_init+0xa8>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6013      	str	r3, [r2, #0]

	can_tx_header.StdId = func_config->can_id;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	7a1b      	ldrb	r3, [r3, #8]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <sw3_can_init+0xac>)
 80008f8:	601a      	str	r2, [r3, #0]
	can_tx_header.IDE = CAN_ID_STD;
 80008fa:	4b24      	ldr	r3, [pc, #144]	@ (800098c <sw3_can_init+0xac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
	can_tx_header.RTR = CAN_RTR_DATA;
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <sw3_can_init+0xac>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
	can_tx_header.DLC = 8;
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <sw3_can_init+0xac>)
 8000908:	2208      	movs	r2, #8
 800090a:	611a      	str	r2, [r3, #16]
	can_tx_header.TransmitGlobalTime = DISABLE;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <sw3_can_init+0xac>)
 800090e:	2200      	movs	r2, #0
 8000910:	751a      	strb	r2, [r3, #20]

	// Reset CAN errors state
	config = func_config;
 8000912:	4a1f      	ldr	r2, [pc, #124]	@ (8000990 <sw3_can_init+0xb0>)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	6013      	str	r3, [r2, #0]
	config->errors.present = 0;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <sw3_can_init+0xb0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

	sw3_gv_params_init(config->gv_params);
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <sw3_can_init+0xb0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f8fc 	bl	8000b24 <sw3_gv_params_init>

	gv_params_arr = (can_param_t*)config->gv_params;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <sw3_can_init+0xb0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <sw3_can_init+0xb4>)
 8000934:	6013      	str	r3, [r2, #0]
	gv_params_size = sizeof(can_params_t) / sizeof(can_param_t);
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <sw3_can_init+0xb8>)
 8000938:	2202      	movs	r2, #2
 800093a:	601a      	str	r2, [r3, #0]

	// Start CAN with given config
	if (HAL_CAN_Start(hcan) != HAL_OK)
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 ff11 	bl	8001764 <HAL_CAN_Start>
		// TODO: do something to report back to telemetry?
	}

	// Turn on interupt for hcan to receive messages on the buffer
	// Whenever the message comes in, it "notifies" us?
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000942:	2102      	movs	r1, #2
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f001 f943 	bl	8001bd0 <HAL_CAN_ActivateNotification>
	// TODO: // STM32 G43 removing this comment, I just put here to remember it later

	// Set up filters
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 800094e:	2312      	movs	r3, #18
 8000950:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x000 << 5; // 0x001
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0x000 << 5; // 0x001
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 20; // how many filters to assign to the CAN1 (master can)
 800096e:	2314      	movs	r3, #20
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4619      	mov	r1, r3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 fe07 	bl	800158c <HAL_CAN_ConfigFilter>
}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	@ 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000005c 	.word	0x2000005c
 800098c:	20000064 	.word	0x20000064
 8000990:	20000080 	.word	0x20000080
 8000994:	2000007c 	.word	0x2000007c
 8000998:	20000000 	.word	0x20000000

0800099c <sw3_can_loop>:
/**
 * This function is called in the main loop to send the heartbeat and other messages
 * @return void
 */
void sw3_can_loop()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	//heartbeat_loop();

	if (hb_pending)
 80009a2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b10 <sw3_can_loop+0x174>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d00f      	beq.n	80009ca <sw3_can_loop+0x2e>
	{
		static can_payload_t payload;

		payload.id = HEARTBEAT_PARAM_ID;
 80009aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b14 <sw3_can_loop+0x178>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b0:	801a      	strh	r2, [r3, #0]
		payload.value = 0;
 80009b2:	4b58      	ldr	r3, [pc, #352]	@ (8000b14 <sw3_can_loop+0x178>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]

		if (send_can_message(payload.data) == HAL_OK)
 80009b8:	4856      	ldr	r0, [pc, #344]	@ (8000b14 <sw3_can_loop+0x178>)
 80009ba:	f7ff fde5 	bl	8000588 <send_can_message>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <sw3_can_loop+0x2e>
		{
			hb_pending = 0;
 80009c4:	4b52      	ldr	r3, [pc, #328]	@ (8000b10 <sw3_can_loop+0x174>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
		}
	}

	// sends general vehicle params tat are marked for send
	for (int i = 0; i < gv_params_size; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	e094      	b.n	8000afa <sw3_can_loop+0x15e>
	{
		static can_payload_t payload;

		// checks if the param is a broadcast
		if (gv_params_arr[i].flags.message_mode == AUTO_BROADCAST ||
 80009d0:	4b51      	ldr	r3, [pc, #324]	@ (8000b18 <sw3_can_loop+0x17c>)
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	7d5b      	ldrb	r3, [r3, #21]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d00d      	beq.n	8000a08 <sw3_can_loop+0x6c>
			gv_params_arr[i].flags.message_mode == MANUAL_BROADCAST) {
 80009ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000b18 <sw3_can_loop+0x17c>)
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	7d5b      	ldrb	r3, [r3, #21]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	b2db      	uxtb	r3, r3
		if (gv_params_arr[i].flags.message_mode == AUTO_BROADCAST ||
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d175      	bne.n	8000af4 <sw3_can_loop+0x158>

			// if it is an auto broadcast check ttl and change
			if (gv_params_arr[i].flags.message_mode == AUTO_BROADCAST) {
 8000a08:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a0a:	6819      	ldr	r1, [r3, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	7d5b      	ldrb	r3, [r3, #21]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d11f      	bne.n	8000a64 <sw3_can_loop+0xc8>
				// if the parameter value has changed, mark it for send
				if (gv_params_arr[i].value != gv_params_arr[i].last_value) {
 8000a24:	4b3c      	ldr	r3, [pc, #240]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	6859      	ldr	r1, [r3, #4]
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4403      	add	r3, r0
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d00b      	beq.n	8000a64 <sw3_can_loop+0xc8>
					gv_params_arr[i].flags.marked_for_send = 1;
 8000a4c:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	18ca      	adds	r2, r1, r3
 8000a5c:	7d53      	ldrb	r3, [r2, #21]
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	7553      	strb	r3, [r2, #21]
				}

				// TODO: Check TTL
			}

			if (gv_params_arr[i].flags.marked_for_send)
 8000a64:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	440b      	add	r3, r1
 8000a74:	7d5b      	ldrb	r3, [r3, #21]
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d039      	beq.n	8000af4 <sw3_can_loop+0x158>
			{
				payload.id = gv_params_arr[i].PARAM_ID;
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	440b      	add	r3, r1
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <sw3_can_loop+0x180>)
 8000a94:	801a      	strh	r2, [r3, #0]
				payload.value = gv_params_arr[i].value;
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000a98:	6819      	ldr	r1, [r3, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <sw3_can_loop+0x180>)
 8000aaa:	6053      	str	r3, [r2, #4]

				if (send_can_message(payload.data) == HAL_OK)
 8000aac:	481b      	ldr	r0, [pc, #108]	@ (8000b1c <sw3_can_loop+0x180>)
 8000aae:	f7ff fd6b 	bl	8000588 <send_can_message>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d11d      	bne.n	8000af4 <sw3_can_loop+0x158>
				{
					gv_params_arr[i].last_value = gv_params_arr[i].value;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000aba:	6819      	ldr	r1, [r3, #0]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	4419      	add	r1, r3
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	4403      	add	r3, r0
 8000ad8:	684a      	ldr	r2, [r1, #4]
 8000ada:	609a      	str	r2, [r3, #8]
					gv_params_arr[i].flags.marked_for_send = 0;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <sw3_can_loop+0x17c>)
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	18ca      	adds	r2, r1, r3
 8000aec:	7d53      	ldrb	r3, [r2, #21]
 8000aee:	f36f 1304 	bfc	r3, #4, #1
 8000af2:	7553      	strb	r3, [r2, #21]
	for (int i = 0; i < gv_params_size; i++)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <sw3_can_loop+0x184>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	f4ff af65 	bcc.w	80009d0 <sw3_can_loop+0x34>
				}
			}
		}
	}
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000009d 	.word	0x2000009d
 8000b14:	200000cc 	.word	0x200000cc
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	200000d8 	.word	0x200000d8
 8000b20:	20000000 	.word	0x20000000

08000b24 <sw3_gv_params_init>:
#include "can_params.h"

// Init CAN params
// TODO: should throw these configs into a env file or makefile?
void sw3_gv_params_init(can_params_t *gv_params)
{
 8000b24:	b4b0      	push	{r4, r5, r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
					.TTL = 20,
					.flags = { .message_mode = DEPENCENCY_CALLBACK, .marked_for_send = 0, .reserved = 0}
			}
	};

	*gv_params = params;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <sw3_gv_params_init+0x2c>)
 8000b30:	461c      	mov	r4, r3
 8000b32:	4615      	mov	r5, r2
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bcb0      	pop	{r4, r5, r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000004 	.word	0x20000004

08000b54 <gv_commands_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void gv_commands_callback(uint16_t id, uint32_t value) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	80fb      	strh	r3, [r7, #6]

	if (id == global_vehicle_parameters.led.PARAM_ID) {
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <gv_commands_callback+0x30>)
 8000b62:	8b1b      	ldrh	r3, [r3, #24]
 8000b64:	88fa      	ldrh	r2, [r7, #6]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d108      	bne.n	8000b7c <gv_commands_callback+0x28>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, value);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <gv_commands_callback+0x34>)
 8000b76:	f001 fdb7 	bl	80026e8 <HAL_GPIO_WritePin>
//		HAL_GPIO_TogglePin(LED_CAN_GPIO_Port, LED_CAN_Pin);
		return;
 8000b7a:	bf00      	nop
	}

}
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001a4 	.word	0x200001a4
 8000b88:	40021400 	.word	0x40021400

08000b8c <gv_params_callback>:

void gv_params_callback(uint16_t id, uint32_t value) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	80fb      	strh	r3, [r7, #6]
	if (id == global_vehicle_parameters.led.PARAM_ID) {
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <gv_params_callback+0x30>)
 8000b9a:	8b1b      	ldrh	r3, [r3, #24]
 8000b9c:	88fa      	ldrh	r2, [r7, #6]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d107      	bne.n	8000bb2 <gv_params_callback+0x26>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, value);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <gv_params_callback+0x34>)
 8000bae:	f001 fd9b 	bl	80026e8 <HAL_GPIO_WritePin>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001a4 	.word	0x200001a4
 8000bc0:	40021400 	.word	0x40021400

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bc8:	f000 fa04 	bl	8000fd4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fb85 	bl	80012da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f838 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 f98e 	bl	8000ef4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000bd8:	f000 f89c 	bl	8000d14 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f8ee 	bl	8000dbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be0:	f000 f93a 	bl	8000e58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start the CAN peripheral
  HAL_CAN_Start(&hcan1);
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <main+0x6c>)
 8000be6:	f000 fdbd 	bl	8001764 <HAL_CAN_Start>

  // Turn on interupt for hcan to receive messages on the buffer
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bea:	2102      	movs	r1, #2
 8000bec:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <main+0x6c>)
 8000bee:	f000 ffef 	bl	8001bd0 <HAL_CAN_ActivateNotification>

  vehicle_can_config.errors.present = 0;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <main+0x70>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
  vehicle_can_config.gv_params = &global_vehicle_parameters;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <main+0x70>)
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <main+0x74>)
 8000bfc:	605a      	str	r2, [r3, #4]
  vehicle_can_config.can_id = BOARD_CAN_ID;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <main+0x70>)
 8000c00:	2203      	movs	r2, #3
 8000c02:	721a      	strb	r2, [r3, #8]
  vehicle_can_config.board_type_id = BOARD_TYPE_ID;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <main+0x70>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  vehicle_can_config.ttl = BOARD_TTL;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <main+0x70>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	741a      	strb	r2, [r3, #16]
  sw3_can_init(&hcan1, &vehicle_can_config);
 8000c10:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <main+0x70>)
 8000c12:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <main+0x6c>)
 8000c14:	f7ff fe64 	bl	80008e0 <sw3_can_init>
  sw3_gv_params_init(&global_vehicle_parameters);
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <main+0x74>)
 8000c1a:	f7ff ff83 	bl	8000b24 <sw3_gv_params_init>
  sw3_can_set_gv_commands_callback(gv_commands_callback);
 8000c1e:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <main+0x78>)
 8000c20:	f7ff fd16 	bl	8000650 <sw3_can_set_gv_commands_callback>
  sw3_can_set_gv_params_callback(gv_params_callback);
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <main+0x7c>)
 8000c26:	f7ff fd27 	bl	8000678 <sw3_can_set_gv_params_callback>
  {
    // Content of the while loop here
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    sw3_can_loop();
 8000c2a:	f7ff feb7 	bl	800099c <sw3_can_loop>
 8000c2e:	e7fc      	b.n	8000c2a <main+0x66>
 8000c30:	200000e4 	.word	0x200000e4
 8000c34:	200001d4 	.word	0x200001d4
 8000c38:	200001a4 	.word	0x200001a4
 8000c3c:	08000b55 	.word	0x08000b55
 8000c40:	08000b8d 	.word	0x08000b8d

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2234      	movs	r2, #52	@ 0x34
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fe8c 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <SystemClock_Config+0xc8>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <SystemClock_Config+0xc8>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c74:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <SystemClock_Config+0xc8>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c88:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cb4:	2360      	movs	r3, #96	@ 0x60
 8000cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fd65 	bl	8002798 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd4:	f000 f9aa 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fffe 	bl	8002cf4 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000cfe:	f000 f995 	bl	800102c <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	@ 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d1c:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <MX_CAN1_Init+0xa4>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d26:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d32:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d3a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d3e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d42:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d68:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000d6a:	f000 fb13 	bl	8001394 <HAL_CAN_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000d74:	f000 f95a 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x000<<5; // 0x001
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x000<<5; // 0x001
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000d9c:	2314      	movs	r3, #20
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <MX_CAN1_Init+0xa0>)
 8000da6:	f000 fbf1 	bl	800158c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	@ 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000e4 	.word	0x200000e4
 8000db8:	40006400 	.word	0x40006400

08000dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000de4:	2218      	movs	r2, #24
 8000de6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000df0:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000df2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e00:	4813      	ldr	r0, [pc, #76]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000e02:	f002 f969 	bl	80030d8 <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e0c:	f000 f90e 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000e1e:	f002 fab9 	bl	8003394 <HAL_TIM_ConfigClockSource>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 f900 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <MX_TIM2_Init+0x94>)
 8000e3a:	f002 fced 	bl	8003818 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e44:	f000 f8f2 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000010c 	.word	0x2000010c
 8000e54:	000f4240 	.word	0x000f4240

08000e58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <MX_TIM3_Init+0x98>)
 8000e7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e7e:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8000e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e8c:	2264      	movs	r2, #100	@ 0x64
 8000e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e9c:	4813      	ldr	r0, [pc, #76]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000e9e:	f002 f91b 	bl	80030d8 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ea8:	f000 f8c0 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000eba:	f002 fa6b 	bl	8003394 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ec4:	f000 f8b2 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_TIM3_Init+0x94>)
 8000ed6:	f002 fc9f 	bl	8003818 <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 f8a4 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000158 	.word	0x20000158
 8000ef0:	40000400 	.word	0x40000400

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a22      	ldr	r2, [pc, #136]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_CAN_Pin|LED_BOARD_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000f70:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <MX_GPIO_Init+0xd8>)
 8000f72:	f001 fbb9 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4810      	ldr	r0, [pc, #64]	@ (8000fd0 <MX_GPIO_Init+0xdc>)
 8000f8e:	f001 f9ff 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin LED_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_BOARD_Pin;
 8000f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <MX_GPIO_Init+0xd8>)
 8000fac:	f001 f9f0 	bl	8002390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2028      	movs	r0, #40	@ 0x28
 8000fb6:	f001 f93c 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fba:	2028      	movs	r0, #40	@ 0x28
 8000fbc:	f001 f955 	bl	800226a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	@ 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021400 	.word	0x40021400
 8000fd0:	40020800 	.word	0x40020800

08000fd4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fe6:	f001 f95b 	bl	80022a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fea:	2301      	movs	r3, #1
 8000fec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ff6:	231f      	movs	r3, #31
 8000ff8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ffa:	2387      	movs	r3, #135	@ 0x87
 8000ffc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001002:	2300      	movs	r3, #0
 8001004:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001006:	2301      	movs	r3, #1
 8001008:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800100a:	2301      	movs	r3, #1
 800100c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001016:	463b      	mov	r3, r7
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f979 	bl	8002310 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800101e:	2004      	movs	r0, #4
 8001020:	f001 f956 	bl	80022d0 <HAL_MPU_Enable>

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_MspInit+0x44>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_MspInit+0x44>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_MspInit+0x44>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x44>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x44>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a23      	ldr	r2, [pc, #140]	@ (800112c <HAL_CAN_MspInit+0xac>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d13f      	bne.n	8001122 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <HAL_CAN_MspInit+0xb0>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <HAL_CAN_MspInit+0xb0>)
 80010a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <HAL_CAN_MspInit+0xb0>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <HAL_CAN_MspInit+0xb0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <HAL_CAN_MspInit+0xb0>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <HAL_CAN_MspInit+0xb0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d2:	2301      	movs	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010e2:	2309      	movs	r3, #9
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4811      	ldr	r0, [pc, #68]	@ (8001134 <HAL_CAN_MspInit+0xb4>)
 80010ee:	f001 f94f 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f2:	2302      	movs	r3, #2
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001102:	2309      	movs	r3, #9
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <HAL_CAN_MspInit+0xb4>)
 800110e:	f001 f93f 	bl	8002390 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2014      	movs	r0, #20
 8001118:	f001 f88b 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800111c:	2014      	movs	r0, #20
 800111e:	f001 f8a4 	bl	800226a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40006400 	.word	0x40006400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020c00 	.word	0x40020c00

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001148:	d114      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6413      	str	r3, [r2, #64]	@ 0x40
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	201c      	movs	r0, #28
 8001168:	f001 f863 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800116c:	201c      	movs	r0, #28
 800116e:	f001 f87c 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001172:	e018      	b.n	80011a6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <HAL_TIM_Base_MspInit+0x7c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d113      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201d      	movs	r0, #29
 800119c:	f001 f849 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011a0:	201d      	movs	r0, #29
 80011a2:	f001 f862 	bl	800226a <HAL_NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40000400 	.word	0x40000400

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <NMI_Handler+0x4>

080011c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <UsageFault_Handler+0x4>

080011e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120e:	f000 f8a1 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <CAN1_RX0_IRQHandler+0x10>)
 800121e:	f000 fcfd 	bl	8001c1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000e4 	.word	0x200000e4

0800122c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <TIM2_IRQHandler+0x10>)
 8001232:	f001 ffa8 	bl	8003186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000010c 	.word	0x2000010c

08001240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <TIM3_IRQHandler+0x10>)
 8001246:	f001 ff9e 	bl	8003186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000158 	.word	0x20000158

08001254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 8001258:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800125c:	f001 fa78 	bl	8002750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800128c:	f7ff ffea 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 fb63 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fc83 	bl	8000bc4 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80012cc:	08003a00 	.word	0x08003a00
  ldr r2, =_sbss
 80012d0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80012d4:	200001ec 	.word	0x200001ec

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>

080012da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012de:	2003      	movs	r0, #3
 80012e0:	f000 ff9c 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e4:	200f      	movs	r0, #15
 80012e6:	f000 f805 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ea:	f7ff fea5 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ffb7 	bl	8002286 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 ff7f 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000034 	.word	0x20000034
 800134c:	2000003c 	.word	0x2000003c
 8001350:	20000038 	.word	0x20000038

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000003c 	.word	0x2000003c
 8001378:	200001e8 	.word	0x200001e8

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200001e8 	.word	0x200001e8

08001394 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0ed      	b.n	8001582 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fe64 	bl	8001080 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff ffd8 	bl	800137c <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ce:	e012      	b.n	80013f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d0:	f7ff ffd4 	bl	800137c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b0a      	cmp	r3, #10
 80013dc:	d90b      	bls.n	80013f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2205      	movs	r2, #5
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0c5      	b.n	8001582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0e5      	beq.n	80013d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0202 	bic.w	r2, r2, #2
 8001412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff ffb2 	bl	800137c <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800141a:	e012      	b.n	8001442 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800141c:	f7ff ffae 	bl	800137c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d90b      	bls.n	8001442 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e09f      	b.n	8001582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e5      	bne.n	800141c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e5b      	ldrb	r3, [r3, #25]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e9b      	ldrb	r3, [r3, #26]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0220 	orr.w	r2, r2, #32
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e007      	b.n	80014ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0220 	bic.w	r2, r2, #32
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7edb      	ldrb	r3, [r3, #27]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0210 	bic.w	r2, r2, #16
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e007      	b.n	80014f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0210 	orr.w	r2, r2, #16
 80014f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0208 	orr.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e007      	b.n	8001522 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0208 	bic.w	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7f5b      	ldrb	r3, [r3, #29]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0204 	orr.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e007      	b.n	800154c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	ea42 0103 	orr.w	r1, r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015a4:	7cfb      	ldrb	r3, [r7, #19]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_ConfigFilter+0x26>
 80015aa:	7cfb      	ldrb	r3, [r7, #19]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	f040 80c7 	bne.w	8001740 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a69      	ldr	r2, [pc, #420]	@ (800175c <HAL_CAN_ConfigFilter+0x1d0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d001      	beq.n	80015c0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80015bc:	4b68      	ldr	r3, [pc, #416]	@ (8001760 <HAL_CAN_ConfigFilter+0x1d4>)
 80015be:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a63      	ldr	r2, [pc, #396]	@ (8001760 <HAL_CAN_ConfigFilter+0x1d4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d111      	bne.n	80015fc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015de:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2201      	movs	r2, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d123      	bne.n	800166e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	401a      	ands	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001648:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3248      	adds	r2, #72	@ 0x48
 800164e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001662:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001664:	6979      	ldr	r1, [r7, #20]
 8001666:	3348      	adds	r3, #72	@ 0x48
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d122      	bne.n	80016bc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	431a      	orrs	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001696:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3248      	adds	r2, #72	@ 0x48
 800169c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b2:	6979      	ldr	r1, [r7, #20]
 80016b4:	3348      	adds	r3, #72	@ 0x48
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016d6:	e007      	b.n	80016e8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001702:	e007      	b.n	8001714 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	431a      	orrs	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001732:	f023 0201 	bic.w	r2, r3, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e006      	b.n	800174e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40003400 	.word	0x40003400
 8001760:	40006400 	.word	0x40006400

08001764 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d12e      	bne.n	80017d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff fdf4 	bl	800137c <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001796:	e012      	b.n	80017be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001798:	f7ff fdf0 	bl	800137c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d90b      	bls.n	80017be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2205      	movs	r2, #5
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e012      	b.n	80017e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e5      	bne.n	8001798 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e006      	b.n	80017e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <HAL_CAN_AddTxMessage+0x2c>
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	2b02      	cmp	r3, #2
 8001814:	f040 80ad 	bne.w	8001972 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10a      	bne.n	8001838 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8095 	beq.w	8001962 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	0e1b      	lsrs	r3, r3, #24
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10d      	bne.n	8001870 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	6809      	ldr	r1, [r1, #0]
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3318      	adds	r3, #24
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	440b      	add	r3, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00f      	b.n	8001890 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001884:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3318      	adds	r3, #24
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3318      	adds	r3, #24
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	440b      	add	r3, r1
 80018a0:	3304      	adds	r3, #4
 80018a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	7d1b      	ldrb	r3, [r3, #20]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d111      	bne.n	80018d0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3318      	adds	r3, #24
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	3304      	adds	r3, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	6811      	ldr	r1, [r2, #0]
 80018c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3318      	adds	r3, #24
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	440b      	add	r3, r1
 80018cc:	3304      	adds	r3, #4
 80018ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3307      	adds	r3, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	061a      	lsls	r2, r3, #24
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3306      	adds	r3, #6
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3305      	adds	r3, #5
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	4313      	orrs	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	3204      	adds	r2, #4
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	4610      	mov	r0, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	6811      	ldr	r1, [r2, #0]
 80018f8:	ea43 0200 	orr.w	r2, r3, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	440b      	add	r3, r1
 8001902:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001906:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3303      	adds	r3, #3
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	061a      	lsls	r2, r3, #24
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3302      	adds	r3, #2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3301      	adds	r3, #1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	4313      	orrs	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	4610      	mov	r0, r2
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	6811      	ldr	r1, [r2, #0]
 800192e:	ea43 0200 	orr.w	r2, r3, r0
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	440b      	add	r3, r1
 8001938:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800193c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3318      	adds	r3, #24
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	6811      	ldr	r1, [r2, #0]
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3318      	adds	r3, #24
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e00e      	b.n	8001980 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e006      	b.n	8001980 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	@ 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d003      	beq.n	80019b0 <HAL_CAN_GetRxMessage+0x24>
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	f040 8103 	bne.w	8001bb6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10e      	bne.n	80019d4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d116      	bne.n	80019f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0f7      	b.n	8001bc4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0e8      	b.n	8001bc4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	331b      	adds	r3, #27
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0204 	and.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10c      	bne.n	8001a2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	331b      	adds	r3, #27
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0d5b      	lsrs	r3, r3, #21
 8001a20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e00b      	b.n	8001a42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	331b      	adds	r3, #27
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	331b      	adds	r3, #27
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0202 	and.w	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	331b      	adds	r3, #27
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2208      	movs	r2, #8
 8001a74:	611a      	str	r2, [r3, #16]
 8001a76:	e00b      	b.n	8001a90 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	331b      	adds	r3, #27
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	3304      	adds	r3, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	331b      	adds	r3, #27
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	331b      	adds	r3, #27
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0a1a      	lsrs	r2, r3, #8
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0c1a      	lsrs	r2, r3, #16
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3302      	adds	r3, #2
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e1a      	lsrs	r2, r3, #24
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	3303      	adds	r3, #3
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3304      	adds	r3, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0a1a      	lsrs	r2, r3, #8
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3305      	adds	r3, #5
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0c1a      	lsrs	r2, r3, #16
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e1a      	lsrs	r2, r3, #24
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3307      	adds	r3, #7
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d108      	bne.n	8001ba2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0220 	orr.w	r2, r2, #32
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	e007      	b.n	8001bb2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e006      	b.n	8001bc4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d002      	beq.n	8001bee <HAL_CAN_ActivateNotification+0x1e>
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d109      	bne.n	8001c02 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6959      	ldr	r1, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e006      	b.n	8001c10 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
  }
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d07c      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f983 	bl	8001f8a <HAL_CAN_TxMailbox0CompleteCallback>
 8001c84:	e016      	b.n	8001cb4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c98:	e00c      	b.n	8001cb4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e002      	b.n	8001cb4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f989 	bl	8001fc6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d024      	beq.n	8001d08 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f963 	bl	8001f9e <HAL_CAN_TxMailbox1CompleteCallback>
 8001cd8:	e016      	b.n	8001d08 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cec:	e00c      	b.n	8001d08 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d00:	e002      	b.n	8001d08 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f969 	bl	8001fda <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d024      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f943 	bl	8001fb2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d2c:	e016      	b.n	8001d5c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d40:	e00c      	b.n	8001d5c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d54:	e002      	b.n	8001d5c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f949 	bl	8001fee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f930 	bl	8002002 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fd7e 	bl	80008bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f912 	bl	800202a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8f9 	bl	8002016 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8fc 	bl	800203e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2208      	movs	r2, #8
 8001e60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8f5 	bl	8002052 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d07b      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d072      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d043      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d03e      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eea:	2b60      	cmp	r3, #96	@ 0x60
 8001eec:	d02b      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x32a>
 8001eee:	2b60      	cmp	r3, #96	@ 0x60
 8001ef0:	d82e      	bhi.n	8001f50 <HAL_CAN_IRQHandler+0x334>
 8001ef2:	2b50      	cmp	r3, #80	@ 0x50
 8001ef4:	d022      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x320>
 8001ef6:	2b50      	cmp	r3, #80	@ 0x50
 8001ef8:	d82a      	bhi.n	8001f50 <HAL_CAN_IRQHandler+0x334>
 8001efa:	2b40      	cmp	r3, #64	@ 0x40
 8001efc:	d019      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x316>
 8001efe:	2b40      	cmp	r3, #64	@ 0x40
 8001f00:	d826      	bhi.n	8001f50 <HAL_CAN_IRQHandler+0x334>
 8001f02:	2b30      	cmp	r3, #48	@ 0x30
 8001f04:	d010      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x30c>
 8001f06:	2b30      	cmp	r3, #48	@ 0x30
 8001f08:	d822      	bhi.n	8001f50 <HAL_CAN_IRQHandler+0x334>
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d002      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x2f8>
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d005      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f12:	e01d      	b.n	8001f50 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f1c:	e019      	b.n	8001f52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f26:	e014      	b.n	8001f52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	f043 0320 	orr.w	r3, r3, #32
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f30:	e00f      	b.n	8001f52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3a:	e00a      	b.n	8001f52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f44:	e005      	b.n	8001f52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f4e:	e000      	b.n	8001f52 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f50:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f60:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2204      	movs	r2, #4
 8001f68:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f872 	bl	8002066 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	@ 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <__NVIC_SetPriorityGrouping+0x40>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <__NVIC_SetPriorityGrouping+0x40>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	05fa0000 	.word	0x05fa0000

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	@ (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022a4:	f3bf 8f5f 	dmb	sy
}
 80022a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <HAL_MPU_Disable+0x28>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <HAL_MPU_Disable+0x28>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_MPU_Disable+0x2c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	e000ed90 	.word	0xe000ed90

080022d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80022d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <HAL_MPU_Enable+0x38>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_MPU_Enable+0x3c>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	4a09      	ldr	r2, [pc, #36]	@ (800230c <HAL_MPU_Enable+0x3c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022ee:	f3bf 8f4f 	dsb	sy
}
 80022f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022f4:	f3bf 8f6f 	isb	sy
}
 80022f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed90 	.word	0xe000ed90
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	785a      	ldrb	r2, [r3, #1]
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 800231e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a19      	ldr	r2, [pc, #100]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800232c:	4a17      	ldr	r2, [pc, #92]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7b1b      	ldrb	r3, [r3, #12]
 8002338:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7adb      	ldrb	r3, [r3, #11]
 800233e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002340:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7a9b      	ldrb	r3, [r3, #10]
 8002346:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002348:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b5b      	ldrb	r3, [r3, #13]
 800234e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7b9b      	ldrb	r3, [r3, #14]
 8002356:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7bdb      	ldrb	r3, [r3, #15]
 800235e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002360:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7a5b      	ldrb	r3, [r3, #9]
 8002366:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7a1b      	ldrb	r3, [r3, #8]
 800236e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002370:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800237a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800237c:	6113      	str	r3, [r2, #16]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed90 	.word	0xe000ed90

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e175      	b.n	800269c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023b0:	2201      	movs	r2, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	f040 8164 	bne.w	8002696 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d005      	beq.n	80023e6 <HAL_GPIO_Init+0x56>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d130      	bne.n	8002448 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d017      	beq.n	8002484 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d123      	bne.n	80024d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	08da      	lsrs	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80be 	beq.w	8002696 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_GPIO_Init+0x324>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_GPIO_Init+0x324>)
 8002520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002524:	6453      	str	r3, [r2, #68]	@ 0x44
 8002526:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_GPIO_Init+0x324>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002532:	4a61      	ldr	r2, [pc, #388]	@ (80026b8 <HAL_GPIO_Init+0x328>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a58      	ldr	r2, [pc, #352]	@ (80026bc <HAL_GPIO_Init+0x32c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d037      	beq.n	80025ce <HAL_GPIO_Init+0x23e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a57      	ldr	r2, [pc, #348]	@ (80026c0 <HAL_GPIO_Init+0x330>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d031      	beq.n	80025ca <HAL_GPIO_Init+0x23a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a56      	ldr	r2, [pc, #344]	@ (80026c4 <HAL_GPIO_Init+0x334>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d02b      	beq.n	80025c6 <HAL_GPIO_Init+0x236>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a55      	ldr	r2, [pc, #340]	@ (80026c8 <HAL_GPIO_Init+0x338>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d025      	beq.n	80025c2 <HAL_GPIO_Init+0x232>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a54      	ldr	r2, [pc, #336]	@ (80026cc <HAL_GPIO_Init+0x33c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01f      	beq.n	80025be <HAL_GPIO_Init+0x22e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a53      	ldr	r2, [pc, #332]	@ (80026d0 <HAL_GPIO_Init+0x340>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x22a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_GPIO_Init+0x344>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x226>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a51      	ldr	r2, [pc, #324]	@ (80026d8 <HAL_GPIO_Init+0x348>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x222>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a50      	ldr	r2, [pc, #320]	@ (80026dc <HAL_GPIO_Init+0x34c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x21e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4f      	ldr	r2, [pc, #316]	@ (80026e0 <HAL_GPIO_Init+0x350>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x21a>
 80025a6:	2309      	movs	r3, #9
 80025a8:	e012      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025aa:	230a      	movs	r3, #10
 80025ac:	e010      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025ae:	2308      	movs	r3, #8
 80025b0:	e00e      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00c      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025b6:	2306      	movs	r3, #6
 80025b8:	e00a      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e008      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025be:	2304      	movs	r3, #4
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e004      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x240>
 80025ce:	2300      	movs	r3, #0
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f002 0203 	and.w	r2, r2, #3
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4093      	lsls	r3, r2
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025e0:	4935      	ldr	r1, [pc, #212]	@ (80026b8 <HAL_GPIO_Init+0x328>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ee:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002612:	4a34      	ldr	r2, [pc, #208]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002618:	4b32      	ldr	r3, [pc, #200]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800263c:	4a29      	ldr	r2, [pc, #164]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002642:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <HAL_GPIO_Init+0x354>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3301      	adds	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	f67f ae86 	bls.w	80023b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40013800 	.word	0x40013800
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40021400 	.word	0x40021400
 80026d4:	40021800 	.word	0x40021800
 80026d8:	40021c00 	.word	0x40021c00
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40022400 	.word	0x40022400
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800272c:	887a      	ldrh	r2, [r7, #2]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	041a      	lsls	r2, r3, #16
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43d9      	mvns	r1, r3
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	400b      	ands	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800275a:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d006      	beq.n	8002774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f806 	bl	8002780 <HAL_GPIO_EXTI_Callback>
  }
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e29b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8087 	beq.w	80028ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	4b96      	ldr	r3, [pc, #600]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d00c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c8:	4b93      	ldr	r3, [pc, #588]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d112      	bne.n	80027fa <HAL_RCC_OscConfig+0x62>
 80027d4:	4b90      	ldr	r3, [pc, #576]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d06c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x130>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d168      	bne.n	80028c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e275      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x7a>
 8002804:	4b84      	ldr	r3, [pc, #528]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a83      	ldr	r2, [pc, #524]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e02e      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x9c>
 800281a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0xc0>
 800283e:	4b76      	ldr	r3, [pc, #472]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b73      	ldr	r3, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a72      	ldr	r2, [pc, #456]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002858:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b6c      	ldr	r3, [pc, #432]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6b      	ldr	r2, [pc, #428]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fd80 	bl	800137c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fd7c 	bl	800137c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e229      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b61      	ldr	r3, [pc, #388]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fd6c 	bl	800137c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fd68 	bl	800137c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	@ 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e215      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b57      	ldr	r3, [pc, #348]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x110>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d069      	beq.n	80029aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d6:	4b50      	ldr	r3, [pc, #320]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x190>
 80028ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x17a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1e9      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b41      	ldr	r3, [pc, #260]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	493d      	ldr	r1, [pc, #244]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a38      	ldr	r2, [pc, #224]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fd1e 	bl	800137c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe fd1a 	bl	800137c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1c7      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b2d      	ldr	r3, [pc, #180]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4929      	ldr	r1, [pc, #164]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
 8002976:	e018      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	4b27      	ldr	r3, [pc, #156]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fcfa 	bl	800137c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fcf6 	bl	800137c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1a3      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d038      	beq.n	8002a28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c2:	4a15      	ldr	r2, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fcd7 	bl	800137c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe fcd3 	bl	800137c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e180      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x23a>
 80029f0:	e01a      	b.n	8002a28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f6:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fcbd 	bl	800137c <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe fcb9 	bl	800137c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d903      	bls.n	8002a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e166      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
 8002a18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b92      	ldr	r3, [pc, #584]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a4 	beq.w	8002b7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b8c      	ldr	r3, [pc, #560]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b89      	ldr	r3, [pc, #548]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a88      	ldr	r2, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b86      	ldr	r3, [pc, #536]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	4b83      	ldr	r3, [pc, #524]	@ (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a6a:	4b80      	ldr	r3, [pc, #512]	@ (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7f      	ldr	r2, [pc, #508]	@ (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fc81 	bl	800137c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fc7d 	bl	800137c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	@ 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e12a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b76      	ldr	r3, [pc, #472]	@ (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x31a>
 8002aa4:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a6f      	ldr	r2, [pc, #444]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab0:	e02d      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x33c>
 8002aba:	4b6b      	ldr	r3, [pc, #428]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a6a      	ldr	r2, [pc, #424]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	4b68      	ldr	r3, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	4a67      	ldr	r2, [pc, #412]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x35e>
 8002adc:	4b62      	ldr	r3, [pc, #392]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a61      	ldr	r2, [pc, #388]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a5e      	ldr	r2, [pc, #376]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002af6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a5b      	ldr	r2, [pc, #364]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b02:	4b59      	ldr	r3, [pc, #356]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	4a58      	ldr	r2, [pc, #352]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fc31 	bl	800137c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fc2d 	bl	800137c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0d8      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b4c      	ldr	r3, [pc, #304]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCC_OscConfig+0x386>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fc1b 	bl	800137c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fc17 	bl	800137c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0c2      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	4a3c      	ldr	r2, [pc, #240]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80ae 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	4b37      	ldr	r3, [pc, #220]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d06d      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d14b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b32      	ldr	r3, [pc, #200]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fbe8 	bl	800137c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fbe4 	bl	800137c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e091      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b29      	ldr	r3, [pc, #164]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	071b      	lsls	r3, r3, #28
 8002bfa:	491b      	ldr	r1, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a18      	ldr	r2, [pc, #96]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fbb6 	bl	800137c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fbb2 	bl	800137c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e05f      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x47c>
 8002c32:	e057      	b.n	8002ce4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0b      	ldr	r2, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fb9c 	bl	800137c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fb98 	bl	800137c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e045      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4b0>
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x54c>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c70:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <HAL_RCC_OscConfig+0x558>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d030      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d129      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d122      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d119      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0d0      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d910      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b67      	ldr	r3, [pc, #412]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 020f 	bic.w	r2, r3, #15
 8002d22:	4965      	ldr	r1, [pc, #404]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b63      	ldr	r3, [pc, #396]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0b8      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d54:	4b59      	ldr	r3, [pc, #356]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a58      	ldr	r2, [pc, #352]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d6c:	4b53      	ldr	r3, [pc, #332]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a52      	ldr	r2, [pc, #328]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d78:	4b50      	ldr	r3, [pc, #320]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	494d      	ldr	r1, [pc, #308]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d040      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b47      	ldr	r3, [pc, #284]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d115      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e07f      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b41      	ldr	r3, [pc, #260]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e073      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06b      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4936      	ldr	r1, [pc, #216]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fac8 	bl	800137c <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fac4 	bl	800137c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e053      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d210      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b24      	ldr	r3, [pc, #144]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4922      	ldr	r1, [pc, #136]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b20      	ldr	r3, [pc, #128]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e032      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4916      	ldr	r1, [pc, #88]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e72:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	490e      	ldr	r1, [pc, #56]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e86:	f000 f821 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	490a      	ldr	r1, [pc, #40]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e98:	5ccb      	ldrb	r3, [r1, r3]
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea2:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fa24 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023c00 	.word	0x40023c00
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	080039e0 	.word	0x080039e0
 8002ec4:	20000034 	.word	0x20000034
 8002ec8:	20000038 	.word	0x20000038

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed0:	b094      	sub	sp, #80	@ 0x50
 8002ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002edc:	2300      	movs	r3, #0
 8002ede:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee4:	4b79      	ldr	r3, [pc, #484]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d00d      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x40>
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	f200 80e1 	bhi.w	80030b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x34>
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efe:	e0db      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b73      	ldr	r3, [pc, #460]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f04:	e0db      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f06:	4b73      	ldr	r3, [pc, #460]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f0a:	e0d8      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f16:	4b6d      	ldr	r3, [pc, #436]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	4b6a      	ldr	r3, [pc, #424]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	2200      	movs	r2, #0
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f04f 0100 	mov.w	r1, #0
 8002f4a:	0159      	lsls	r1, r3, #5
 8002f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f50:	0150      	lsls	r0, r2, #5
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4621      	mov	r1, r4
 8002f58:	1a51      	subs	r1, r2, r1
 8002f5a:	6139      	str	r1, [r7, #16]
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f70:	4659      	mov	r1, fp
 8002f72:	018b      	lsls	r3, r1, #6
 8002f74:	4651      	mov	r1, sl
 8002f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	018a      	lsls	r2, r1, #6
 8002f7e:	4651      	mov	r1, sl
 8002f80:	ebb2 0801 	subs.w	r8, r2, r1
 8002f84:	4659      	mov	r1, fp
 8002f86:	eb63 0901 	sbc.w	r9, r3, r1
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9e:	4690      	mov	r8, r2
 8002fa0:	4699      	mov	r9, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	eb18 0303 	adds.w	r3, r8, r3
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	462b      	mov	r3, r5
 8002fac:	eb49 0303 	adc.w	r3, r9, r3
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	024b      	lsls	r3, r1, #9
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc8:	4621      	mov	r1, r4
 8002fca:	024a      	lsls	r2, r1, #9
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fdc:	f7fd f92c 	bl	8000238 <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe8:	e058      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fea:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ffa:	623b      	str	r3, [r7, #32]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	f04f 0000 	mov.w	r0, #0
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	0159      	lsls	r1, r3, #5
 8003012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003016:	0150      	lsls	r0, r2, #5
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4641      	mov	r1, r8
 800301e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003022:	4649      	mov	r1, r9
 8003024:	eb63 0b01 	sbc.w	fp, r3, r1
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800303c:	ebb2 040a 	subs.w	r4, r2, sl
 8003040:	eb63 050b 	sbc.w	r5, r3, fp
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	00eb      	lsls	r3, r5, #3
 800304e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003052:	00e2      	lsls	r2, r4, #3
 8003054:	4614      	mov	r4, r2
 8003056:	461d      	mov	r5, r3
 8003058:	4643      	mov	r3, r8
 800305a:	18e3      	adds	r3, r4, r3
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	464b      	mov	r3, r9
 8003060:	eb45 0303 	adc.w	r3, r5, r3
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003072:	4629      	mov	r1, r5
 8003074:	028b      	lsls	r3, r1, #10
 8003076:	4621      	mov	r1, r4
 8003078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800307c:	4621      	mov	r1, r4
 800307e:	028a      	lsls	r2, r1, #10
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003086:	2200      	movs	r2, #0
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	61fa      	str	r2, [r7, #28]
 800308c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003090:	f7fd f8d2 	bl	8000238 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4613      	mov	r3, r2
 800309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x200>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b6:	e002      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3750      	adds	r7, #80	@ 0x50
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	007a1200 	.word	0x007a1200

080030d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e049      	b.n	800317e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f81a 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fa38 	bl	800358c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01b      	beq.n	80031ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f06f 0202 	mvn.w	r2, #2
 80031ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f9bd 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80031d6:	e005      	b.n	80031e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f9af 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9c0 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01b      	beq.n	8003236 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0204 	mvn.w	r2, #4
 8003206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f997 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003222:	e005      	b.n	8003230 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f989 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f99a 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01b      	beq.n	8003282 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0208 	mvn.w	r2, #8
 8003252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2204      	movs	r2, #4
 8003258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f971 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 800326e:	e005      	b.n	800327c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f963 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f974 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01b      	beq.n	80032ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0210 	mvn.w	r2, #16
 800329e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2208      	movs	r2, #8
 80032a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f94b 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80032ba:	e005      	b.n	80032c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f93d 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f94e 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00c      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f06f 0201 	mvn.w	r2, #1
 80032ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f91b 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fb14 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fb0c 	bl	800395c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f908 	bl	8003578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0220 	mvn.w	r2, #32
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fad4 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_ConfigClockSource+0x1c>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0b4      	b.n	800351a <HAL_TIM_ConfigClockSource+0x186>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4b56      	ldr	r3, [pc, #344]	@ (8003524 <HAL_TIM_ConfigClockSource+0x190>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e8:	d03e      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0xd4>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ee:	f200 8087 	bhi.w	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f6:	f000 8086 	beq.w	8003506 <HAL_TIM_ConfigClockSource+0x172>
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fe:	d87f      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b70      	cmp	r3, #112	@ 0x70
 8003402:	d01a      	beq.n	800343a <HAL_TIM_ConfigClockSource+0xa6>
 8003404:	2b70      	cmp	r3, #112	@ 0x70
 8003406:	d87b      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b60      	cmp	r3, #96	@ 0x60
 800340a:	d050      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x11a>
 800340c:	2b60      	cmp	r3, #96	@ 0x60
 800340e:	d877      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b50      	cmp	r3, #80	@ 0x50
 8003412:	d03c      	beq.n	800348e <HAL_TIM_ConfigClockSource+0xfa>
 8003414:	2b50      	cmp	r3, #80	@ 0x50
 8003416:	d873      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b40      	cmp	r3, #64	@ 0x40
 800341a:	d058      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x13a>
 800341c:	2b40      	cmp	r3, #64	@ 0x40
 800341e:	d86f      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b30      	cmp	r3, #48	@ 0x30
 8003422:	d064      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x15a>
 8003424:	2b30      	cmp	r3, #48	@ 0x30
 8003426:	d86b      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b20      	cmp	r3, #32
 800342a:	d060      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x15a>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d867      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x15a>
 8003434:	2b10      	cmp	r3, #16
 8003436:	d05a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x15a>
 8003438:	e062      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800344a:	f000 f9c5 	bl	80037d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800345c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	609a      	str	r2, [r3, #8]
      break;
 8003466:	e04f      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003478:	f000 f9ae 	bl	80037d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800348a:	609a      	str	r2, [r3, #8]
      break;
 800348c:	e03c      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	461a      	mov	r2, r3
 800349c:	f000 f922 	bl	80036e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2150      	movs	r1, #80	@ 0x50
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f97b 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e02c      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 f941 	bl	8003742 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2160      	movs	r1, #96	@ 0x60
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f96b 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e01c      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 f902 	bl	80036e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2140      	movs	r1, #64	@ 0x40
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f95b 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e00c      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f000 f952 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 80034fe:	e003      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e000      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	fffeff88 	.word	0xfffeff88

08003528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a46      	ldr	r2, [pc, #280]	@ (80036b8 <TIM_Base_SetConfig+0x12c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a43      	ldr	r2, [pc, #268]	@ (80036bc <TIM_Base_SetConfig+0x130>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a42      	ldr	r2, [pc, #264]	@ (80036c0 <TIM_Base_SetConfig+0x134>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a41      	ldr	r2, [pc, #260]	@ (80036c4 <TIM_Base_SetConfig+0x138>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a40      	ldr	r2, [pc, #256]	@ (80036c8 <TIM_Base_SetConfig+0x13c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a35      	ldr	r2, [pc, #212]	@ (80036b8 <TIM_Base_SetConfig+0x12c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02b      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ec:	d027      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a32      	ldr	r2, [pc, #200]	@ (80036bc <TIM_Base_SetConfig+0x130>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d023      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <TIM_Base_SetConfig+0x134>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01f      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a30      	ldr	r2, [pc, #192]	@ (80036c4 <TIM_Base_SetConfig+0x138>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01b      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <TIM_Base_SetConfig+0x13c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d017      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2e      	ldr	r2, [pc, #184]	@ (80036cc <TIM_Base_SetConfig+0x140>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2d      	ldr	r2, [pc, #180]	@ (80036d0 <TIM_Base_SetConfig+0x144>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00f      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2c      	ldr	r2, [pc, #176]	@ (80036d4 <TIM_Base_SetConfig+0x148>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2b      	ldr	r2, [pc, #172]	@ (80036d8 <TIM_Base_SetConfig+0x14c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <TIM_Base_SetConfig+0x150>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <TIM_Base_SetConfig+0x154>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a10      	ldr	r2, [pc, #64]	@ (80036b8 <TIM_Base_SetConfig+0x12c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0xf8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <TIM_Base_SetConfig+0x13c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]
  }
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40014400 	.word	0x40014400
 80036d4:	40014800 	.word	0x40014800
 80036d8:	40001800 	.word	0x40001800
 80036dc:	40001c00 	.word	0x40001c00
 80036e0:	40002000 	.word	0x40002000

080036e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f023 0201 	bic.w	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800370e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 030a 	bic.w	r3, r3, #10
 8003720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0210 	bic.w	r2, r3, #16
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800376c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	031b      	lsls	r3, r3, #12
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800377e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	f043 0307 	orr.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	021a      	lsls	r2, r3, #8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800382c:	2302      	movs	r3, #2
 800382e:	e06d      	b.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a30      	ldr	r2, [pc, #192]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2f      	ldr	r2, [pc, #188]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800386a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a20      	ldr	r2, [pc, #128]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a2:	d01d      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a15      	ldr	r2, [pc, #84]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10c      	bne.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40010000 	.word	0x40010000
 800391c:	40010400 	.word	0x40010400
 8003920:	40000400 	.word	0x40000400
 8003924:	40000800 	.word	0x40000800
 8003928:	40000c00 	.word	0x40000c00
 800392c:	40014000 	.word	0x40014000
 8003930:	40001800 	.word	0x40001800

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <memset>:
 8003970:	4402      	add	r2, r0
 8003972:	4603      	mov	r3, r0
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	f803 1b01 	strb.w	r1, [r3], #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4d0d      	ldr	r5, [pc, #52]	@ (80039b8 <__libc_init_array+0x38>)
 8003984:	4c0d      	ldr	r4, [pc, #52]	@ (80039bc <__libc_init_array+0x3c>)
 8003986:	1b64      	subs	r4, r4, r5
 8003988:	10a4      	asrs	r4, r4, #2
 800398a:	2600      	movs	r6, #0
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	4d0b      	ldr	r5, [pc, #44]	@ (80039c0 <__libc_init_array+0x40>)
 8003992:	4c0c      	ldr	r4, [pc, #48]	@ (80039c4 <__libc_init_array+0x44>)
 8003994:	f000 f818 	bl	80039c8 <_init>
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	2600      	movs	r6, #0
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	080039f8 	.word	0x080039f8
 80039bc:	080039f8 	.word	0x080039f8
 80039c0:	080039f8 	.word	0x080039f8
 80039c4:	080039fc 	.word	0x080039fc

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
