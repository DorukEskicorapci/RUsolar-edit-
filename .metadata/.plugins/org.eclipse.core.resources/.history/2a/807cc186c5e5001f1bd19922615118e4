#ifndef CAN_H
#define CAN_H

#include <stdint.h>
#include "main.h"

//////////////////////////////////////////////////////////
/////////////////////// TYPES ////////////////////////////
//////////////////////////////////////////////////////////

typedef struct {
	unsigned char message_mode: 4, marked_for_send: 1, reserved: 3;
} internal_flags_t;

typedef struct {
	uint16_t param_id;
	uint32_t value;
	uint32_t last_value;
	uint32_t safe_value;
	uint32_t timestamp;
	uint8_t  ttl;
	internal_flags_t flags;
} can_param_t;

typedef enum {
	PASSIVE,
	DEPENDENCY_NO_CALLBACK,
	DEPENCENCY_CALLBACK,
	AUTO_BROADCAST,
	MANUAL_BROADCAST
} message_mode_t;

typedef struct {
	uint32_t board_state;
	uint32_t system_state;
} identification_params;

typedef union {
	uint8_t present;
	uint8_t nack: 1, other: 1, runtime: 1, reserved: 5;
} can_errors_t;

//////////////////////////////////////////////////////////
///////////////////// FUNCTIONS //////////////////////////
//////////////////////////////////////////////////////////

void sw3_can_init(CAN_HandleTypeDef*);

void sw3_can_error_handler(CAN_HandleTypeDef* hcan);

void sw3_can_interrupt_handler(CAN_HandleTypeDef* hcan1);

void sw3_can_loop();

int sw3_set_param_mode(message_mode_t, can_param_t*);

int sw3_force_send(can_param_t*);

#endif
