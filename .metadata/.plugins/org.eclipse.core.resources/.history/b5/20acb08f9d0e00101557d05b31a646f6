/**
 ******************************************************************************
 * @file    can.c
 * @brief   This file provides code for the configuration and management
 *          of the CAN instances.
 ******************************************************************************
 * @attention
 *
 */

#include "can.h"
#include "main.h"
#include "can_params.h"
#include "stm32f7xx_hal_can.h"

/**
 * Receiving CAN message payload structure
 * - id: 16-bit parameter ID
 * - value: 32-bit parameter value
 * - reserved: 16-bit reserved field
 * - data: 8-bit array of the payload as maximum size of 8 bytes
 */
typedef union
{
	struct
	{
		uint16_t id;
		uint32_t value;
		uint16_t reserved;
	};
	uint8_t data[8];
} can_payload_t;

/**
 * CAN instance. It is used to communicate with the CAN peripheral
 * call the HAL_CAN functions
 */
static CAN_HandleTypeDef *can_hcan = NULL;

/**
 * CAN TX Mailbox. It is used to store the mailbox number
 * of the last transmitted message
 */
static uint32_t tx_mailbox;

/**
 * CAN TX Header. It is used to store the header of the message
 * to be transmitted
 */
static CAN_TxHeaderTypeDef can_tx_header;

static can_param_t *gv_params_arr = NULL;
static size_t gv_params_size = sizeof(can_params_t) / sizeof(can_param_t);

/**
 * CAN configuration structure. It is used to store the configuration of CAN
 */
static can_config_t *config = NULL;

static void (*sw3_can_third_party_callback)(CAN_RxHeaderTypeDef, uint8_t[8]) = NULL;
static void (*sw3_can_gv_commands_callback)(uint16_t param_id, uint32_t payload) = NULL;
static void (*sw3_can_shared_params_callback)(CAN_RxHeaderTypeDef, uint16_t param_id, uint32_t payload) = NULL;
static void (*sw3_can_gv_params_callback)(uint16_t param_id, uint32_t payload) = NULL;

static uint8_t hb_message_count = 0;
static uint32_t hb_timestamp = 0;
static uint8_t can_hb_pulse = 0; // 0 is on, 1 is off
static uint8_t hb_pending = 0;

static can_errors_t sw3_can_errors;

/**
 * Find a parameter by its ID
 * @param id: 16-bit parameter ID
 * @return can_param_t*: pointer to the parameter
 */
static can_param_t *find_param_by_id(uint16_t id)
{
	assert_param(id >= PARAM_ID_RANGE_MIN && id <= PARAM_ID_RANGE_MAX);

	for (int i = 0; i < gv_params_size; i++)
	{
		if (id == gv_params_arr[i].PARAM_ID)
		{
			return &gv_params_arr[i];
		}
	}

	return NULL;
}

/**
 * Send a CAN message
 * @param data: 8-bit array of the payload as maximum size of 8 bytes
 * @return HAL_StatusTypeDef: HAL status
 */
static HAL_StatusTypeDef send_can_message(uint8_t data[8])
{
	// Make sure we don't send a NULL pointer
	if (data == NULL) {
		return HAL_ERROR;
	}

	return HAL_CAN_AddTxMessage(can_hcan, &can_tx_header, data, &tx_mailbox);
}

/**
 * TODO: Not sure what this function does, will need to check later
 */
void heartbeat_loop()
{
	if (hb_message_count >= 2)
	{
		hb_timestamp = HAL_GetTick();
		can_hb_pulse = 1;
	}
	if (HAL_GetTick() - hb_timestamp > 250 + config->can_id)
	{
		hb_message_count = 0;
		can_hb_pulse = 0;
	}
	if (HAL_GetTick() - hb_timestamp > 1000 + config->can_id)
	{
		hb_pending = 1;
		hb_message_count++;
		hb_timestamp = HAL_GetTick();
	}
}

/**
 * TODO: Not sure what this function does, will need to check later
 */
void sw3_can_set_third_party_callback(void (*callback)(CAN_RxHeaderTypeDef, uint8_t[8]))
{
	if (callback == NULL)
		return;
	sw3_can_third_party_callback = callback;
}

/**
 * TODO: Not sure what this function does, will need to check later
 */
void sw3_can_set_gv_commands_callback(void (*callback)(uint16_t param_id, uint32_t payload))
{
	if (callback == NULL)
		return;
	sw3_can_gv_commands_callback = callback;
}

/**
 * TODO: Not sure what this function does, will need to check later
 */
void sw3_can_set_shared_params_callback(void (*callback)(CAN_RxHeaderTypeDef , uint16_t param_id, uint32_t payload))
{
	if (callback == NULL)
		return;
	sw3_can_shared_params_callback = callback;
}

void sw3_can_set_gv_params_callback(void (*callback)(uint16_t param_id, uint32_T payload)) {
	if (callback == NULL) {
		return;
	}
	sw3_can_gv_params_callback = callback;
}


/**
 * This function is called when a message is received from CAN bus
 * @param hcan: pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN
 * @return void
 */
void sw3_can_interrupt_handler(CAN_HandleTypeDef *hcan)
{
	// Make sure we don't have a NULL pointer
	assert_param(hcan != NULL);

	static CAN_RxHeaderTypeDef RxHeader;
	static can_payload_t can_payload;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, can_payload.data) != HAL_OK)
	{
		return;
	}

	if (RxHeader.StdId < SHARED_IDENTIFICATION_RANGE_MIN || RxHeader.StdId > SHARED_IDENTIFICATION_RANGE_MAX)
	{
		// device is not SW3, call third party callback
		if (sw3_can_third_party_callback == NULL)
		{
			return;
		}

		return sw3_can_third_party_callback(RxHeader, can_payload.data);
	}

	// Find the parameter by given ID
	can_param_t *param = find_param_by_id(can_payload.id);

	if (param == NULL)
	{ // Parameter is unknown to this firmware
		return;
	}

	if (param->flags.message_mode == AUTO_BROADCAST ||
		param->flags.message_mode == MANUAL_BROADCAST)
	{
		// Another board is conflicting with this board
		sw3_can_errors.broadcast_conflict = 1;

		return;
	}

	if (
		can_payload.id >= SHARED_IDENTIFICATION_RANGE_MIN &&
		can_payload.id <= SHARED_IDENTIFICATION_RANGE_MAX)
	{
		// Identication handler
		if (sw3_can_shared_params_callback == NULL)
			return;

		sw3_can_shared_params_callback(RxHeader, can_payload.id, can_payload.value);
	}
	else if (
		can_payload.id >= SHARED_FAULT_RANGE_MIN &&
		can_payload.id <= SHARED_FAULT_RANGE_MAX)
	{
		// Fault handler
		if (sw3_can_shared_params_callback == NULL)
			return;

		sw3_can_shared_params_callback(RxHeader, can_payload.id, can_payload.value);
	}
	else if (
		can_payload.id >= SHARED_STR_BROADCAST_RANGE_MIN &&
		can_payload.id <= SHARED_STR_BROADCAST_RANGE_MAX)
	{
		// String broadcast handler
		if (sw3_can_shared_params_callback == NULL)
			return;

		sw3_can_shared_params_callback(RxHeader, can_payload.id, can_payload.value);
	}
	else if (
		can_payload.id >= RESERVED_RANGE_MIN &&
		can_payload.id <= RESERVED_RANGE_MIN)
	{
		// Reserver handler
		// For now, do nothing here
	}
	else if (
		can_payload.id >= GLOBAL_VEHICLE_CMD_RANGE_MIN &&
		can_payload.id <= GLOBAL_VEHICLE_CMD_RANGE_MAX)
	{
		// Global vehicle commands handler
		// Detect heartbeat
		if (can_payload.id == HEARTBEAT_PARAM_ID)
		{
			hb_message_count++;
			heartbeat_loop();
		}
		else
		{
			// Something else
			if (sw3_can_gv_commands_callback == NULL)
				return;

			sw3_can_gv_commands_callback(can_payload.id, can_payload.value);
		}
	}
	else if (
		can_payload.id >= GLOBAL_VEHICLE_PARAMS_RANGE_MIN &&
		can_payload.id <= GLOBAL_VEHICLE_PARAMS_RANGE_MAX)
	{
		// Global vehicle params handler
		param->last_value = param->value;

		param->value = can_payload.value;

		param->timestamp = HAL_GetTick();

		sw3_can_gv_params_callback(can_payload.id, can_payload.value);
	}
	else
	{
		// Invalid ID
		return;
	}


}

/**
 * This function is called when a message is received from CAN bus
 * @param hcan: pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN
 * @return void
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
	assert_param(hcan != NULL);

    HAL_GPIO_TogglePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin);
	sw3_can_interrupt_handler(hcan);
}

void sw3_can_error_handler(CAN_HandleTypeDef *hcan)
{
	assert_param(hcan != NULL);

	uint32_t err = HAL_CAN_GetError(hcan);

	// TODO: should handle for each case of error according to ERROR_CODE in stm32f7xx_hal_can.h specification
	// if needed
	if (err)
	{
		sw3_can_errors.other = 1;
	}
	else
	{
		sw3_can_errors.other = 0;
	}
}

/**
 * Initialize CAN bus
 * @param hcan: pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN
 * @param config: pointer to a can_config_t structure that contains the configuration information for the specified CAN
 * @return void
 */
void sw3_can_init(CAN_HandleTypeDef *hcan, can_config_t *func_config)
{
	assert_param(hcan != NULL && func_config != NULL);

	can_hcan = hcan;

	can_tx_header.StdId = func_config->can_id;
	can_tx_header.IDE = CAN_ID_STD;
	can_tx_header.RTR = CAN_RTR_DATA;
	can_tx_header.DLC = 8;
	can_tx_header.TransmitGlobalTime = DISABLE;

	// Reset CAN errors state
	config = func_config;
	config->errors.present = 0;

	sw3_gv_params_init(config->gv_params);

	gv_params_arr = (can_param_t*)config->gv_params;
	gv_params_size = sizeof(can_params_t) / sizeof(can_param_t);

	// Start CAN with given config
	if (HAL_CAN_Start(hcan) != HAL_OK)
	{
		// TODO: do something to report back to telemetry?
	}

	// Turn on interupt for hcan to receive messages on the buffer
	// Whenever the message comes in, it "notifies" us?
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);

	// TODO: // STM32 G43 removing this comment, I just put here to remember it later

	// Set up filters
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	canfilterconfig.FilterIdHigh = 0x000 << 5; // 0x001
	canfilterconfig.FilterIdLow = 0;
	canfilterconfig.FilterMaskIdHigh = 0x000 << 5; // 0x001
	canfilterconfig.FilterMaskIdLow = 0x0000;
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
	canfilterconfig.SlaveStartFilterBank = 20; // how many filters to assign to the CAN1 (master can)

	HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
}

/**
 * This function is called in the main loop to send the heartbeat and other messages
 * @return void
 */
void sw3_can_loop()
{
	//heartbeat_loop();

	if (hb_pending)
	{
		static can_payload_t payload;

		payload.id = HEARTBEAT_PARAM_ID;
		payload.value = 0;

		if (send_can_message(payload.data) == HAL_OK)
		{
			hb_pending = 0;
		}
	}

	// sends general vehicle params tat are marked for send
	for (int i = 0; i < gv_params_size; i++)
	{
		static can_payload_t payload;

		// checks if the param is a broadcast
		if (gv_params_arr[i].flags.message_mode == AUTO_BROADCAST ||
			gv_params_arr[i].flags.message_mode == MANUAL_BROADCAST) {

			// if it is an auto broadcast check ttl and change
			if (gv_params_arr[i].flags.message_mode == AUTO_BROADCAST) {
				// if the parameter value has changed, mark it for send
				if (gv_params_arr[i].value != gv_params_arr[i].last_value) {
					gv_params_arr[i].flags.marked_for_send = 1;
				}

				// TODO: Check TTL
			}

			if (gv_params_arr[i].flags.marked_for_send)
			{
				payload.id = gv_params_arr[i].PARAM_ID;
				payload.value = gv_params_arr[i].value;

				if (send_can_message(payload.data) == HAL_OK)
				{
					gv_params_arr[i].last_value = gv_params_arr[i].value;
					gv_params_arr[i].flags.marked_for_send = 0;
				}
			}
		}
	}
}

/**
 * Set the message mode for CAN param 
*/
void sw3_set_param_mode(message_mode_t msg_mode, can_param_t* param) {
	assert_param(param != NULL);
	
	// set message mode
	param->flags.message_mode = msg_mode;

	// clear marked-for-send flag to false
	param->flags.marked_for_send = 0;
}

int sw3_force_send(can_param_t *param) {
	assert_param(param != NULL);

	// Check if CAN param is in BROADCAST mode
	if (
		param->flags.message_mode == AUTO_BROADCAST ||
		param->flags.message_mode == MANUAL_BROADCAST
	) {
		// set mark-for-send to true
		param->flags.marked_for_send = 1;

		return 1;
	}

	return 0;
}
